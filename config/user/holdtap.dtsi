/*

#define HOLD_TAP(NAME, FLAVOR, TAP_TERM, QTAP_TERM, HOLD, TAP) 	\
	NAME: hold_tap_##NAME { 									\
	    compatible      = "zmk,behavior-hold-tap"; 				\
		label           = ZMK_HELPER_STRINGIFY(ht_ ## NAME);	\
	    flavor          = ZMK_HELPER_STRINGIFY(FLAVOR);			\
	    tapping-term-ms = <TAP_TERM>;       					\
	    quick-tap-ms    = <QTAP_TERM>;  						\
	    #binding-cells  = <2>;                    				\
	    bindings        = <HOLD>, <TAP>;    	      			\
	};

#define LAYER_TAP(NAME, FLAVOR, TAP_TERM, QTAP_TERM) 			\
	NAME: layer_tap_##NAME { 									\
	    compatible      = "zmk,behavior-hold-tap"; 				\
		label           = ZMK_HELPER_STRINGIFY(lt_ ## NAME);	\
	    flavor          = ZMK_HELPER_STRINGIFY(FLAVOR);			\
	    tapping-term-ms = <TAP_TERM>;       					\
	    quick-tap-ms    = <QTAP_TERM>;  						\
	    #binding-cells  = <2>;                    				\
	    bindings 		= <&mo>, <&kp>;	    	      			\
	};


#define HOLD_TAP(NAME, FLAVOR, TAP_TERM, QTAP_TERM, HOLD, TAP) 	\
	NAME: hold_tap_##NAME { 									\
		label           = ZMK_HELPER_STRINGIFY(ht_ ## NAME);	\
	    compatible      = "zmk,behavior-hold-tap"; 				\

	    flavor          = ZMK_HELPER_STRINGIFY(FLAVOR);			\
	    tapping-term-ms = <TAP_TERM>;       					\
	    quick-tap-ms    = <QTAP_TERM>;  						\
	    #binding-cells  = <2>;                    				\
	    bindings        = <HOLD>, <TAP>;    	      			\
	};

LAYER_TAP(mou,	tap-preferred, MOU_TAP_TERM, QUICK_TAP_TERM)
LAYER_TAP(nav,	tap-preferred, NAV_TAP_TERM, QUICK_TAP_TERM)

HOLD_TAP(ht,	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp)
*/


#define TAPPING_TERM 	200
#define MOUSE_TAP_TERM	170
#define NAV_TAP_TERM	125
#define QUICK_TAP_TERM 	100

ZMK_BEHAVIOR(ht, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&kp>, <&kp>;	
)

ZMK_BEHAVIOR(mou, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <MOUSE_TAP_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&mo>, <&kp>;	
)

ZMK_BEHAVIOR(nav, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <NAV_TAP_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&mo>, <&kp>;	
)


/*
2023-08-24 
The below is temporary because Nick Conway started his dev branch before main zmk released parameterized macros

#TODO remove this in the future
*/

// brackets, quotes then put cursor inside

ZMK_BEHAVIOR(ht_brc, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_brc>, <&kp>;	
)

ZMK_BEHAVIOR(ht_lgt, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_lgt>, <&kp>;	
)

ZMK_BEHAVIOR(ht_bkt, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_bkt>, <&kp>;	
)

ZMK_BEHAVIOR(ht_par, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_par>, <&kp>;	
)

ZMK_BEHAVIOR(ht_sqt, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bin,.dings = <&m_sqt>, <&kp>;	
)

ZMK_BEHAVIOR(ht_dqt, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_dqt>, <&kp>;	
)

// double tap keys

ZMK_BEHAVIOR(ht_bslh, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_bslh>, <&kp>;	
)

ZMK_BEHAVIOR(ht_fslh, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_fslh>, <&kp>;	
)

ZMK_BEHAVIOR(ht_und, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_und>, <&kp>;	
)

ZMK_BEHAVIOR(ht_pipe, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_pipe>, <&kp>;	
)

ZMK_BEHAVIOR(ht_hash, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_hash>, <&kp>;	
)

ZMK_BEHAVIOR(ht_eql, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_eql>, <&kp>;	
)

ZMK_BEHAVIOR(ht_amp, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_amp>, <&kp>;	
)

// custom macros

ZMK_BEHAVIOR(ht_neql, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_neql>, <&kp>;	
)

ZMK_BEHAVIOR(ht_grv, hold_tap, 
	flavor = "tap-preferred";
	tapping-term-ms = <TAPPING_TERM>;
	quick-tap-ms = <QUICK_TAP_TERM>;
	bindings = <&m_grv>, <&kp>;	
)

/*
HOLD_TAP(dt, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp &kp)
HOLD_TAP(dtl, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp &kp &kp LEFT)
HOLD_TAP(dts, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp SPACE &kp &kp &kp SPACE)
HOLD_TAP(tri, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp &kp &kp)
		
HOLD_TAP(lrbrc, tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp LBRC &kp RBRC &kp LEFT)
HOLD_TAP(lrbkt, tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp LBKT &kp RBKT &kp LEFT)
HOLD_TAP(lrpar, tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp LPAR &kp RPAR &kp LEFT)
HOLD_TAP(lgt, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp LT &kp RT &kp LEFT)
HOLD_TAP(ne, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp SPACE &kp EXCL &kp EQUAL &kp SPACE)


HOLD_TAP(ht,	tap-preferred, &kp, &kp)
HOLD_TAP(dt, 	tap-preferred, &kp, &kp &kp)
HOLD_TAP(dtl, 	tap-preferred, &kp, &kp &kp &kp LEFT)
HOLD_TAP(dts, 	tap-preferred, &kp, &kp SPACE &kp &kp &kp SPACE)
HOLD_TAP(tri, 	tap-preferred, &kp, &kp &kp &kp)
		
HOLD_TAP(lrbrc, tap-preferred, &kp, &kp LBRC &kp RBRC &kp LEFT)
HOLD_TAP(lrbkt, tap-preferred, &kp, &kp LBKT &kp RBKT &kp LEFT)
HOLD_TAP(lrpar, tap-preferred, &kp, &kp LPAR &kp RPAR &kp LEFT)
HOLD_TAP(ltgt, 	tap-preferred, &kp, &kp LT &kp RT &kp LEFT)
HOLD_TAP(ne, 	tap-preferred, &kp, &kp SPACE &kp EXCL &kp EQUAL &kp SPACE)
*/


//#define MOU(tapkey)				&mou	MOUSE,		tapkey
//#define NAV(tapkey)				&nav	NAVI,		tapkey

/*
#define DT(keycode) 			&dt 	keycode, 	keycode	
#define DTL(keycode) 			&dtl 	keycode, 	keycode
#define DTS(keycode)			&dts	keycode, 	keycode
#define TRI(keycode)			&tri	keycode, 	keycode

#define LRBRC(keycode)			&lrbrc 	&none, 		keycode
#define LRBKT(keycode)			&lrbkt 	&none, 		keycode
#define LRPAR(keycode)			&lrpar 	&none, 		keycode
#define LGT(keycode)			&ltgt 	&none, 		keycode
#define NE(keycode)				&ne 	&none, 		keycode

*/

