#define HOLD_TAP(NAME, FLAVOR, TAP_TERM, QTAP_TERM, TAP, HOLD) 	\
	NAME: hold_tap_##NAME { 									\
	    compatible      = "zmk,behavior-hold-tap"; 				\
		label           = ZMK_MACRO_STRINGIFY(ht_##NAME);			\
	    flavor          = ZMK_MACRO_STRINGIFY(FLAVOR);			\
	    tapping-term-ms = <TAP_TERM>;       					\
	    quick-tap-ms    = <QTAP_TERM>;  						\
	    #binding-cells  = <2>;                    				\
	    bindings        = <HOLD>, <TAP>;    	      			\
	};

#define LAYER_TAP(NAME, FLAVOR, TAP_TERM, QTAP_TERM) 			\
	NAME: layer_tap_##NAME { 									\
	    compatible      = "zmk,behavior-hold-tap"; 				\
		label           = ZMK_MACRO_STRINGIFY(lt_##NAME);			\
	    flavor          = ZMK_MACRO_STRINGIFY(FLAVOR);			\
	    tapping-term-ms = <TAP_TERM>;       					\
	    quick-tap-ms    = <QTAP_TERM>;  						\
	    #binding-cells  = <2>;                    				\
	    bindings 		= <&mo>, <&kp>;	    	      			\
	};

#define TAPPING_TERM 		200
#define MOUSE_TAP_TERM		TAPPING_TERM - 30
#define NAV_TAP_TERM		TAPPING_TERM - 75
#define QUICK_TAP_TERM 		100

LAYER_TAP(mou,	tap-preferred, MOUSE_TAP_TERM, QUICK_TAP_TERM)
LAYER_TAP(nav,	tap-preferred, NAV_TAP_TERM, QUICK_TAP_TERM)

HOLD_TAP(ht,	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp)

/*
HOLD_TAP(dt, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp &kp)
HOLD_TAP(dtl, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp &kp &kp LEFT)
HOLD_TAP(dts, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp SPACE &kp &kp &kp SPACE)
HOLD_TAP(tri, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp &kp &kp)
		
HOLD_TAP(lrbrc, tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp LBRC &kp RBRC &kp LEFT)
HOLD_TAP(lrbkt, tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp LBKT &kp RBKT &kp LEFT)
HOLD_TAP(lrpar, tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp LPAR &kp RPAR &kp LEFT)
HOLD_TAP(lgt, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp LT &kp RT &kp LEFT)
HOLD_TAP(ne, 	tap-preferred, TAPPING_TERM, QUICK_TAP_TERM, &kp, &kp SPACE &kp EXCL &kp EQUAL &kp SPACE)


HOLD_TAP(ht,	tap-preferred, &kp, &kp)
HOLD_TAP(dt, 	tap-preferred, &kp, &kp &kp)
HOLD_TAP(dtl, 	tap-preferred, &kp, &kp &kp &kp LEFT)
HOLD_TAP(dts, 	tap-preferred, &kp, &kp SPACE &kp &kp &kp SPACE)
HOLD_TAP(tri, 	tap-preferred, &kp, &kp &kp &kp)
		
HOLD_TAP(lrbrc, tap-preferred, &kp, &kp LBRC &kp RBRC &kp LEFT)
HOLD_TAP(lrbkt, tap-preferred, &kp, &kp LBKT &kp RBKT &kp LEFT)
HOLD_TAP(lrpar, tap-preferred, &kp, &kp LPAR &kp RPAR &kp LEFT)
HOLD_TAP(ltgt, 	tap-preferred, &kp, &kp LT &kp RT &kp LEFT)
HOLD_TAP(ne, 	tap-preferred, &kp, &kp SPACE &kp EXCL &kp EQUAL &kp SPACE)
*/


#define MOU(tapkey)				&mou	MOUSE,		tapkey
#define NAV(tapkey)				&nav	NAVI,		tapkey

#define HT(holdkey, tapkey)		&ht 	holdkey, 	tapkey

/*
#define DT(keycode) 			&dt 	keycode, 	keycode	
#define DTL(keycode) 			&dtl 	keycode, 	keycode
#define DTS(keycode)			&dts	keycode, 	keycode
#define TRI(keycode)			&tri	keycode, 	keycode

#define LRBRC(keycode)			&lrbrc 	&none, 		keycode
#define LRBKT(keycode)			&lrbkt 	&none, 		keycode
#define LRPAR(keycode)			&lrpar 	&none, 		keycode
#define LGT(keycode)			&ltgt 	&none, 		keycode
#define NE(keycode)				&ne 	&none, 		keycode

*/

